//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the template for generating Repositories and a Unit of Work for EF Core model.
// 1.102.0.0
//
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using System.Threading;

namespace FS.Abp.CodingManagement.Coding
{
    public partial class EfCoreCodesTreeRepository : ICodesTreeRepository
    {
        public async Task<Codes> GetDefinitionAsync(string definitionNo)
        {
            var results = await this.Where(x => x.No == definitionNo && x.ParentId == null)
                .Include(e => e.CodeList)
                .ToListAsync().ConfigureAwait(false);
            return results.Single();
        }
        public async Task<List<Codes>> GetDefinitionsAsync()
        {
            var results = await this.Where(x => x.ParentId == null)
                .ToListAsync().ConfigureAwait(false);
            return results;
        }
        public override async Task<Codes> InsertAsync(Codes entity, bool autoSave = false, CancellationToken cancellationToken = default)
        {
            entity.Code = await GetNextChildCodeAsync(entity.ParentId);
            if (string.IsNullOrEmpty(entity.DisplayName))
            {
                entity.DisplayName = entity.Code;
            }
            if (string.IsNullOrEmpty(entity.No))
            {
                entity.No = entity.Code;
            }
            await ValidateEntityAsync(entity);
            return await base.InsertAsync(entity, autoSave, cancellationToken);
        }
    }
}
